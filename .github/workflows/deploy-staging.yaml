name: Deploy to staging
permissions:
    contents: read
    packages: write
on:
    pull_request:
        types: [ready_for_review, opened, reopened, synchronize]
        branches:
            - main
        paths-ignore:
            - 'README.md'
            - 'LICENSE'
    workflow_dispatch:

jobs:
    test:
        name: Test
        if: github.event.pull_request.draft == false
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
            changed: ${{ steps.set-matrix.outputs.changed }}
        steps:
            - name: Checkout
              uses: actions/checkout@v5
              with:
                  # We need to fetch all branches and commits so that Nx affected has a base to compare against.
                  fetch-depth: 0
                  submodules: true

            - name: Update submodules to latest main
              run: |
                  git submodule foreach --recursive git fetch origin
                  git submodule foreach --recursive git checkout origin/main

            - name: Set SHAs
              uses: nrwl/nx-set-shas@v4

            - name: Enable corepack
              run: corepack enable

            - name: Use Node.js 22.14.0
              uses: actions/setup-node@v5
              with:
                  node-version: 22.14.0
                  cache: 'yarn'

            - name: Yarn install
              run: |
                  yarn set version stable
                  yarn install --no-immutable

            - name: Caching Nx
              uses: actions/cache@v4
              with:
                  path: node_modules/.cache
                  key: cache-nx-${{ hashFiles('yarn.lock') }}

            - id: set-matrix
              run: |
                  echo "=== Debugging Nx Commands ==="
                  echo "Git SHA: ${{ github.sha }}"
                  echo "Base SHA: ${{ github.event.pull_request.base.sha }}"

                  echo "=== Checking Nx workspace ==="
                  yarn nx show projects --type=app

                  echo "=== Testing affected command ==="
                  yarn nx show projects --affected --type=app

                  echo "=== Testing affected command with base ==="
                  yarn nx show projects --affected --type=app --base=HEAD~1

                  echo "=== Running matrix command ==="
                  MATRIX_OUTPUT=$(yarn --silent run matrix)
                  echo "Matrix output: '$MATRIX_OUTPUT'"
                  echo "Matrix output length: ${#MATRIX_OUTPUT}"

                  # Convert array to matrix format with appname property
                  MATRIX_JSON=$(echo "$MATRIX_OUTPUT" | jq -c '{"appname": .}')
                  echo "Matrix JSON: $MATRIX_JSON"

                  echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
                  echo "changed=$MATRIX_OUTPUT" >> $GITHUB_OUTPUT

            - run: yarn run lint --configuration=ci
            - run: yarn run test --configuration=ci

    build-app:
        name: Build app ${{ matrix.appname }}
        needs: [test]
        if: ${{ needs.test.outputs.changed != '[]' }}
        runs-on: ubuntu-latest
        strategy:
            matrix: ${{fromJSON(needs.test.outputs.matrix)}}
        steps:
            - name: Checkout
              uses: actions/checkout@v5
              with:
                  # We need to fetch all branches and commits so that Nx affected has a base to compare against.
                  fetch-depth: 0
                  submodules: true

            - name: Update submodules to latest main
              run: |
                  git submodule foreach --recursive git fetch origin
                  git submodule foreach --recursive git checkout origin/main

            - name: Set SHAs
              uses: nrwl/nx-set-shas@v4

            - name: Enable corepack
              run: corepack enable

            - name: Use Node.js 22.14.0
              uses: actions/setup-node@v5
              with:
                  node-version: 22.14.0
                  cache: 'yarn'

            - name: Yarn install
              run: |
                  yarn set version stable
                  yarn install --no-immutable

            - name: Caching Nx
              uses: actions/cache@v4
              with:
                  path: node_modules/.cache
                  key: cache-nx-${{ hashFiles('yarn.lock') }}

            - run: yarn playwright install
            #- run: yarn nx e2e ${{ matrix.appname }}-e2e --configuration=ci
            - run: yarn nx build ${{ matrix.appname }} --configuration=ci

            - name: Caching Dist Folder
              uses: actions/cache@v4
              with:
                  path: ./dist
                  key: cache-dist-${{ github.sha }}-${{ matrix.appname }}

    build:
        name: Build image for ${{ matrix.appname }}
        needs: [test, build-app]
        if: ${{ needs.test.outputs.changed != '[]' }}
        strategy:
            matrix: ${{fromJSON(needs.test.outputs.matrix)}}
        uses: Informasjonsforvaltning/workflows/.github/workflows/build-push.yaml@main
        with:
            app_name: ${{ matrix.appname }}-frontend
            environment: staging
            gh_environment: staging
            build_env: true
            build_env_name: BINARY
            build_env_value: ${{ matrix.appname }}-frontend
            cache_path: ./dist
            cache_key: cache-dist-${{ github.sha }}-${{ matrix.appname }}
            dockerfile: apps/${{ matrix.appname }}/Dockerfile
            monorepo_app: true
        secrets:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    deploy:
        name: Deploy image for ${{ matrix.appname }} to staging
        needs: [test, build]
        if: ${{ needs.test.outputs.changed != '[]' && github.actor != 'dependabot[bot]'}}
        strategy:
            matrix: ${{fromJSON(needs.test.outputs.matrix)}}
            fail-fast: false
        uses: Informasjonsforvaltning/workflows/.github/workflows/kustomize-deploy.yaml@main
        with:
            app_name: ${{ matrix.appname }}-frontend
            environment: staging
            gh_environment: staging
            monorepo_app: true
            cluster: digdir-fdk-dev
        secrets:
            GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DIGDIR_FDK_AUTODEPLOY: ${{ secrets.DIGDIR_FDK_DEV_AUTODEPLOY }}
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
